c
customer.total
c
subject.errors
subject.destroy
c
subject.destroy
c
subject.errors
subject.destroy
subject.errors
q
subject.errors
subject.destroy
c
q
subject.errors
subject.destroy
subjecto.destroy
c
::CustomerCaMovement
CustomerCaMovement.create
c
CustomerCaMovement
c
q
canceled_movement_2
q
instance.reload
instance
instance.update(customer_ca_movement_category_id: 2) 
instanceinstance.update(customer_ca_movement_category_id: 2) 
instance
q
canceled_movement_2
second
first.previous
first
q
y
cq
c
cc
c
q
qy
c
cc
c
CustomerCaMovement.where(customer_ca_movement_status_id: 1)
CustomerCaMovement.from_customer(customer)
c
q
CustomerCaMovement.from_customer(customer)
customer_ca_movement_status_id = 1 
c
v
customer_ca_movement_status_id = 1 
 customer_ca_movement_status_id.nil?
q
CustomerCaMovement.first
my_active_movements
q
oldest_date
q
create(:customer_ca_movement, amount: 100, customer_ca_movement_category_id: 1, customer: customer, date: oldest_date)
q
customer
custoemr
create(:customer_ca_movement, amount: 100, customer_ca_movement_category_id: 1, customer: customer, date: oldest_date)
c
q
CustomerCaMovement.with_id_less_than(self.id).blank?
CustomerCaMovement.equal_than(self).present?
c
CustomerCaMovement.equal_than(self).present?
(CustomerCaMovement.equal_than(self).present?
c
id
c
id
c
cc
c
cc
c
ccc
c
cc
c
cc
c
persisted?
c
quit
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
cc
c
cc
c
cc
c
cc
c
cc
c
id
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
c
persisted?
