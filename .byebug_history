q
self.customer_ca_movement.marked_for_destruction?
c
marked_for_destruction?
marked_for_destruction
q
self.customer_ca_movement.marked_for_destruction?
self.customer_ca_movement.dying
self.customer_ca_movement.sa
c
selfc
self.customer_ca_movement
self.objectd
self.object
n
self.object
self
self.class
self
self.dying
c
n
q
self.customer_ca_movement.marked_for_destruction?
self.reload.customer_ca_movement.dying
self.marked_for_destruction?
c
q
c
q
self.marked_for_destruction?
self.marked_for_destroy?
self.marked_for_destroy
q
sek
c
q
self.reload.customer_ca_movement.dying
self.reload.customer_ca_movement.dyingd
self.reload.customer_ca_movement.dying
c
self.reload.customer_ca_movement.marked_for_destruction?
q
self.reload.customer_ca_movement.marked_for_destruction?
self.reload..customer_ca_movement.marked_for_destruction?
self.customer_ca_movement
self.customer_ca_movement.marked_for_destruction?
q
y
self.customer_ca_movement.marked_for_destruction?
self.customer_ca_movement.reload.marked_for_de
q
self.customer_ca_movement.reload.marked_for_destruction?
q
qy
self.customer_ca_movement.reload.marked_for_destruction?
self.customer_ca_movement.reload.mar
self.customer_ca_movement.marked_for_destruction?
q
self.customer_ca_movement.marked_for_destruction?
self.customer_ca_movement
V
q
customer.total.to_s
customer
c
q
self.customer_ca_movement_type.present?
self.amount.present? and self.customer_ca_movement_type.present?
self.amount.present?
self.signed_amount
self.customer.total
q
self.customer.total
q
self.customer.total
self.customer
c
quit
CustomerCaMovement.all
q
c
quit
CustomerCaMovement.all
CustomerCaMovement.count
subject.previous.previous
subject.previous
subject
c
quit
CustomerCaMovement.where("date = '#{middle.date}'")
CustomerCaMovement.where("date = '#{middle.date})
CustomerCaMovement.where("date = '#{middle.date}' #{"AND id < #{middle.id}" if middle.persisted?} ")
previous.id
first.id
middle.id
middle.persisted?
middle.persisted
(CustomerCaMovement.where("date = '#{middle.date}' #{"AND id < #{middle.id}" if middle.persisted?} "))
(CustomerCaMovement.where("date = '#{middle.date}' #{"AND id < #{middle.id}" if middle.persisted?} ")
previous.date
middle.date
CustomerCaMovement.where("date < '#{middle.date}'")
previous.following
following.previous
middle.following
middle.previous
middle
c
middle.previous
middle.following
middle.for
middle.forward
middle.previous
middle.previouss
middle.previous
c
q
CustomerCaMovement.count
CustomerCaMovement.first
CustomerCaMovement.first.date
CustomerCaMovement.where("date < '#{self.date}'")
CustomerCaMovement.where("date = '#{self.date}' #{"AND id < #{self.id}" if self.persisted?} ")
c
CustomerCaMovement.second == middle
CustomerCaMovement.count
CustomerCaMovement.all
CustomrCaMovement.all
CaMovement.all
c
quit
CustomerCaMovement.first
CustomerCaMovement.count
CustomerCaMovement
 CustomerCaMovement.where("date < '#{self.date}'")
 CustomerCaMovement.where("date < '#{self.date}')
 CustomerCaMovement.where("date < '#{self.date}'
CustomerCaMovement.where("date = '#{self.date}' #{"AND id < #{self.id}" if self.persisted?} ")
q
json
q
json
q
json
q
json
q
json
response
c
-c
c
q
subject.customer_ca_movements
q
Y
Q
subject.customer_ca_movements
q
subject.customer_ca_movements
q
subject.customer_ca_movements
q
subject.customer_ca_movements
subject.customer_ca_movement
subject
subject.ca_movements
subject.customer_ca_movements
q
subject.customer_ca_movements
subject.cla
q
Y
Q
subject.class.class_name
subject.class
subject.class_name
subject
subject.customer_ca_movements
q
subject.customer_ca_movements
subject.customer_ca_movementss
subject.customer_ca_movements
subject
q
qq
c
q
Gaucho::Customer.all.to_json
Gaucho::Customer.all.to:json
Gaucho::Customer.all
Customer.all
q
json
q
json
q
json
q
json
json[:data]
c
quit
json
q
CustomersController.methods
CustomersController
CustomersController.index
CustomersController.inde
CustomersController.new
CustomersController
q
FactoryGirl
